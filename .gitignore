# Prerequisites
*.d

# Object files
*.o
*.ko
*.obj
*.elf

# Linker output
*.ilk
*.map
*.exp

# Precompiled Headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lo

# Shared objects (inc. Windows DLLs)
*.dll
*.so
*.so.*
*.dylib

# Executables
*.exe
*.out
*.app
*.i*86
*.x86_64
*.hex

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define structures for Book and WaitlistNode
struct WaitlistNode {
    char lender[50];
    struct WaitlistNode* next;
};

struct Book {
    char title[100];
    char author[100];
    int num_copies;
    char lenders[10][50];
    struct WaitlistNode* waitlist;
    struct Book* next;
};

// Function to add a new book to the library
void addBook(struct Book** library, char title[], char author[], int num_copies) {
    struct Book* newBook = (struct Book*)malloc(sizeof(struct Book));
    strcpy(newBook->title, title);
    strcpy(newBook->author, author);
    newBook->num_copies = num_copies;
    newBook->next = *library;
    *library = newBook;
}

// Function to lend a book
void lendBook(struct Book* library, char title[], char lender_name[]) {
    struct Book* currentBook = library;
    while (currentBook) {
        if (strcmp(currentBook->title, title) == 0) {
            if (currentBook->num_copies > 0) {
                strcpy(currentBook->lenders[currentBook->num_copies - 1], lender_name);
                currentBook->num_copies--;
                printf("Book lent successfully.\n");
            } else {
                printf("Book is currently unavailable. Added to waitlist.\n");
                struct WaitlistNode* newNode = (struct WaitlistNode*)malloc(sizeof(struct WaitlistNode));
                strcpy(newNode->lender, lender_name);
                newNode->next = currentBook->waitlist;
                currentBook->waitlist = newNode;
            }
            return;
        }
        currentBook = currentBook->next;
    }
    printf("Book not found.\n");
}

// Function to return a book
void returnBook(struct Book* library, char title[], char lender_name[]) {
    struct Book* currentBook = library;
    while (currentBook) {
        if (strcmp(currentBook->title, title) == 0) {
            for (int i = 0; i < 10; i++) {
                if (strcmp(currentBook->lenders[i], lender_name) == 0) {
                    currentBook->num_copies++;
                    printf("Book returned successfully: %s\n", title);
                    if (currentBook->waitlist) {
                        struct WaitlistNode* nextLender = currentBook->waitlist;
                        strcpy(currentBook->lenders[i], nextLender->lender);
                        currentBook->num_copies--;
                        currentBook->waitlist = currentBook->waitlist->next;
                        printf("Next Lender: %s\n", nextLender->lender);
                    }
                    return;
                }
            }
            printf("Lender has not borrowed this book.\n");
            return;
        }
        currentBook = currentBook->next;
    }
    printf("Book not found.\n");
}

// Function to display all books in the library
void displayBooks(struct Book* library) {
    struct Book* currentBook = library;
    while (currentBook) {
        printf("Title: %s, Author: %s\n", currentBook->title, currentBook->author);
        printf("Total Copies: %d\n", currentBook->num_copies);
        printf("Lenders: ");
        for (int i = 0; i < 10; i++) {
            if (strlen(currentBook->lenders[i]) > 0) {
                printf("%s", currentBook->lenders[i]);
                if (i < 9 && strlen(currentBook->lenders[i + 1]) > 0) {
                    printf(", ");
                }
            } else {
                break;
            }
        }
        printf("\n");
        printf("Waitlist: ");
        struct WaitlistNode* waitlistNode = currentBook->waitlist;
        while (waitlistNode) {
            printf("%s", waitlistNode->lender);
            waitlistNode = waitlistNode->next;
            if (waitlistNode) {
                printf(", ");
            }
        }
        printf("\n\n");
        currentBook = currentBook->next;
    }
}

// Main function for user interaction
int main() {
    struct Book* library = NULL;
    int choice;
    char title[100];
    char author[100];
    int num_copies;
    char lender_name[50];

    while (1) {
        printf("Library Management System\n");
        printf("1. Add Book\n");
        printf("2. Lend Book\n");
        printf("3. Return Book\n");
        printf("4. Display Books\n");
        printf("5. Quit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter book title: ");
                scanf("%s", title);
                printf("Enter book author: ");
                scanf("%s", author);
                printf("Enter the number of copies: ");
                scanf("%d", &num_copies);
                addBook(&library, title, author, num_copies);
                printf("Book added successfully.\n");
                break;
            case 2:
                printf("Enter the title of the book to lend: ");
                scanf("%s", title);
                printf("Enter the name of the lender: ");
                scanf("%s", lender_name);
                lendBook(library, title, lender_name);
                break;
            case 3:
                printf("Enter the title of the book to return: ");
                scanf("%s", title);
                printf("Enter the name of the lender returning the book: ");
                scanf("%s", lender_name);
                returnBook(library, title, lender_name);
                break;
            case 4:
                displayBooks(library);
                break;
            case 5:
                printf("Exiting the program. Goodbye!\n");
                return 0;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    }

    return 0;
}

               
